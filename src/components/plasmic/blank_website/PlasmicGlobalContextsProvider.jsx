// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { SanityCredentialsProvider } from "@plasmicpkgs/plasmic-sanity-io";
import { EmbedCss } from "@plasmicpkgs/plasmic-embed-css";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant

export default function GlobalContextsProvider(props) {
  const {
    children,
    sanityCredentialsProviderProps,
    embedCssProps,
    antdConfigProviderProps
  } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <SanityCredentialsProvider
      {...sanityCredentialsProviderProps}
      apiVersion={
        sanityCredentialsProviderProps &&
        "apiVersion" in sanityCredentialsProviderProps
          ? sanityCredentialsProviderProps.apiVersion
          : ``
      }
      dataset={
        sanityCredentialsProviderProps &&
        "dataset" in sanityCredentialsProviderProps
          ? sanityCredentialsProviderProps.dataset
          : "production"
      }
      projectId={
        sanityCredentialsProviderProps &&
        "projectId" in sanityCredentialsProviderProps
          ? sanityCredentialsProviderProps.projectId
          : "q3mxrizp"
      }
      token={
        sanityCredentialsProviderProps &&
        "token" in sanityCredentialsProviderProps
          ? sanityCredentialsProviderProps.token
          : undefined
      }
      useCdn={
        sanityCredentialsProviderProps &&
        "useCdn" in sanityCredentialsProviderProps
          ? sanityCredentialsProviderProps.useCdn
          : undefined
      }
    >
      <EmbedCss
        {...embedCssProps}
        css={
          embedCssProps && "css" in embedCssProps
            ? embedCssProps.css
            : "/* CSS snippet */\r\n\r\na {\r\n  cursor: pointer;\r\n}\r\n\r\n@media screen and (min-width: 769px){\r\n  .people-choose-botox-grid {\r\n    grid-template-columns: 1.5fr 1fr;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 414px){\r\n  .people-choose-botox-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 1200px) {\r\n  .botox-helped-scroller {\r\n    max-width: none;\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 769px) {\r\n  .how-botox-works-cards {\r\n    /* max-width: none; */\r\n    width: auto;\r\n  }\r\n}"
        }
      >
        <AntdConfigProvider
          {...antdConfigProviderProps}
          borderRadius={
            antdConfigProviderProps && "borderRadius" in antdConfigProviderProps
              ? antdConfigProviderProps.borderRadius
              : 6
          }
          colorBgBase={
            antdConfigProviderProps && "colorBgBase" in antdConfigProviderProps
              ? antdConfigProviderProps.colorBgBase
              : "#ffffff"
          }
          colorError={
            antdConfigProviderProps && "colorError" in antdConfigProviderProps
              ? antdConfigProviderProps.colorError
              : "#ff4d4f"
          }
          colorInfo={
            antdConfigProviderProps && "colorInfo" in antdConfigProviderProps
              ? antdConfigProviderProps.colorInfo
              : "#1677ff"
          }
          colorPrimary={
            antdConfigProviderProps && "colorPrimary" in antdConfigProviderProps
              ? antdConfigProviderProps.colorPrimary
              : "#1677ff"
          }
          colorSuccess={
            antdConfigProviderProps && "colorSuccess" in antdConfigProviderProps
              ? antdConfigProviderProps.colorSuccess
              : "#52c41a"
          }
          colorWarning={
            antdConfigProviderProps && "colorWarning" in antdConfigProviderProps
              ? antdConfigProviderProps.colorWarning
              : "#faad14"
          }
          controlHeight={
            antdConfigProviderProps &&
            "controlHeight" in antdConfigProviderProps
              ? antdConfigProviderProps.controlHeight
              : 32
          }
          defaultDark={
            antdConfigProviderProps && "defaultDark" in antdConfigProviderProps
              ? antdConfigProviderProps.defaultDark
              : false
          }
          lineWidth={
            antdConfigProviderProps && "lineWidth" in antdConfigProviderProps
              ? antdConfigProviderProps.lineWidth
              : 1
          }
          loadingText={
            antdConfigProviderProps && "loadingText" in antdConfigProviderProps
              ? antdConfigProviderProps.loadingText
              : undefined
          }
          removeLoading={
            antdConfigProviderProps &&
            "removeLoading" in antdConfigProviderProps
              ? antdConfigProviderProps.removeLoading
              : undefined
          }
          sizeStep={
            antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
              ? antdConfigProviderProps.sizeStep
              : 4
          }
          sizeUnit={
            antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
              ? antdConfigProviderProps.sizeUnit
              : 4
          }
          themeStyles={
            antdConfigProviderProps && "themeStyles" in antdConfigProviderProps
              ? antdConfigProviderProps.themeStyles
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? {
                  fontFamily: "Poppins",
                  fontSize: "14px",
                  fontWeight: "400",
                  lineHeight: "1.5",
                  color: "#535556",
                  letterSpacing: "normal"
                }
              : true
              ? {
                  fontFamily: "Poppins",
                  fontSize: "16px",
                  fontWeight: "400",
                  lineHeight: "1.5",
                  color: "#535556",
                  letterSpacing: "normal"
                }
              : undefined
          }
          wireframe={
            antdConfigProviderProps && "wireframe" in antdConfigProviderProps
              ? antdConfigProviderProps.wireframe
              : false
          }
        >
          {children}
        </AntdConfigProvider>
      </EmbedCss>
    </SanityCredentialsProvider>
  );
}
