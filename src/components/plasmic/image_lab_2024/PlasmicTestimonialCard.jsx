// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: zWVJ2Qd7n2nR
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicTestimonialCard.module.css"; // plasmic-import: zWVJ2Qd7n2nR/css
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: jEryObjveBWP/icon

createPlasmicElementProxy;

export const PlasmicTestimonialCard__VariantProps = new Array("instagram");

export const PlasmicTestimonialCard__ArgProps = new Array(
  "title",
  "subtitle",
  "patient",
  "insta",
  "instaLink",
  "children",
  "avatar"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestimonialCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          instaLink: "#"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "instagram",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.instagram
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootinstagram]: hasVariant($state, "instagram", "instagram") }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___2Yrh1)}>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Anna\u2019s Results";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h3>
        <p
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.p__vhRq
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.subtitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Results after one month with Botox";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </p>
      </div>
      {renderPlasmicSlot({
        defaultContents: (
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__c1Kfa)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/image_lab_2024/images/image16.heic",
              fullWidth: 379,
              fullHeight: 379,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.children
      })}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qSj92, {
          [sty.freeBoxinstagram__qSj92N5JGp]: hasVariant(
            $state,
            "instagram",
            "instagram"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__gezlF)}
              displayHeight={"auto"}
              displayMaxHeight={"44px"}
              displayMaxWidth={"44px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/image_lab_2024/images/image18.heic",
                fullWidth: 44,
                fullHeight: 44,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.avatar
        })}
        <div className={classNames(projectcss.all, sty.freeBox__aKxe0)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__b5Qv)}
          >
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__uahni
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.patient;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Anna Green";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p>
            <Icon10Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__lthVq)}>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__yZEcw
              )}
            >
              {"Instagram: "}
            </p>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={(() => {
                try {
                  return $props.instaLink;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.insta;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return " @anna_green";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </PlasmicLink__>
          </div>
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h3", "svg", "link"],
  h3: ["h3"],
  svg: ["svg"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestimonialCard__ArgProps,
          internalVariantPropNames: PlasmicTestimonialCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestimonialCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialCard";
  } else {
    func.displayName = `PlasmicTestimonialCard.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialCard = Object.assign(
  // Top-level PlasmicTestimonialCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicTestimonialCard
    internalVariantProps: PlasmicTestimonialCard__VariantProps,
    internalArgProps: PlasmicTestimonialCard__ArgProps
  }
);

export default PlasmicTestimonialCard;
/* prettier-ignore-end */
