// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: xBvtLE-eO4gb
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ServicesDropdown from "../../ServicesDropdown"; // plasmic-import: fvPNMu4-MgaS/component
import Button from "../../Button"; // plasmic-import: 0o-OkGmTYJg3/component
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicTopNav.module.css"; // plasmic-import: xBvtLE-eO4gb/css
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: CCzaRelhqYIn/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: 3jXxedHkN9MN/icon
import VectorSvgIcon from "./icons/PlasmicIcon__VectorSvg"; // plasmic-import: 8MTtD-TdxPpk/icon

createPlasmicElementProxy;

export const PlasmicTopNav__VariantProps = new Array();

export const PlasmicTopNav__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTopNav__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "menuOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <nav
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
      style={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? (() => {
              try {
                return { height: $state.menuOpen ? "100vh" : "auto" };
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()
          : { position: "fixed", "z-index": "9999" }
      }
    >
      <div className={classNames(projectcss.all, sty.freeBox__aGRa)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__d7XLx)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kqkzf)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__bC8Ou
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "28px"
                    : "32px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/site-logo.png",
                  fullWidth: 1367,
                  fullHeight: 300,
                  aspectRatio: undefined
                }}
              />
            </PlasmicLink__>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? false : true
            ) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7Vl9F)}
              >
                <ServicesDropdown
                  className={classNames(
                    "__wab_instance",
                    sty.servicesDropdown__qi5S
                  )}
                />

                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__a9Qeg
                  )}
                  component={Link}
                  href={"/conditions"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wuoDv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fy41T
                      )}
                    >
                      {"Conditions"}
                    </div>
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__lBx5F
                  )}
                  component={Link}
                  href={"/membership"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l2GjM
                    )}
                  >
                    {"Membership"}
                  </div>
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___1Fiyh
                  )}
                  component={Link}
                  href={"/blog"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vcTaB
                    )}
                  >
                    {"Blog"}
                  </div>
                </PlasmicLink__>
              </Stack__>
            ) : null}
          </Stack__>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? false : true
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___38K)}
            >
              <Stack__
                as={PlasmicLink__}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__pjL8
                )}
                component={Link}
                href={"tel:+18722856769"}
                platform={"nextjs"}
              >
                <Icon15Icon
                  className={classNames(projectcss.all, sty.svg__ppmix)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gCf4L
                  )}
                >
                  {"(872) 285-6769"}
                </div>
              </Stack__>
              <Button
                className={classNames("__wab_instance", sty.button___5F3Pk)}
                link={"/book-now"}
                size={"compact"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nWymn
                  )}
                >
                  {"Book Now"}
                </div>
              </Button>
            </Stack__>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7CcHk)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___38SmE
                )}
                component={Link}
                href={"tel:+18722856769"}
                platform={"nextjs"}
              >
                <Icon15Icon
                  className={classNames(projectcss.all, sty.svg__cnEck)}
                  role={"img"}
                />
              </PlasmicLink__>
              <div
                className={classNames(projectcss.all, sty.freeBox__hJkvM)}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateMenuOpen"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["menuOpen"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateMenuOpen"] != null &&
                    typeof $steps["updateMenuOpen"] === "object" &&
                    typeof $steps["updateMenuOpen"].then === "function"
                  ) {
                    $steps["updateMenuOpen"] = await $steps["updateMenuOpen"];
                  }
                }}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return !$state.menuOpen;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <Icon16Icon
                    data-plasmic-name={"hamburgerOpen"}
                    data-plasmic-override={overrides.hamburgerOpen}
                    className={classNames(projectcss.all, sty.hamburgerOpen)}
                    role={"img"}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? (() => {
                        try {
                          return $state.menuOpen;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                    : true
                ) ? (
                  <VectorSvgIcon
                    data-plasmic-name={"hamburgerClose"}
                    data-plasmic-override={overrides.hamburgerClose}
                    className={classNames(projectcss.all, sty.hamburgerClose)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </Stack__>
          ) : null}
        </Stack__>
      </div>
      {(
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? (() => {
              try {
                return $state.menuOpen;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })()
          : true
      ) ? (
        <div
          data-plasmic-name={"mobileMenu"}
          data-plasmic-override={overrides.mobileMenu}
          className={classNames(projectcss.all, sty.mobileMenu)}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__oRgs3)}
            style={{ "overflow-y": "auto" }}
          >
            <ServicesDropdown
              className={classNames(
                "__wab_instance",
                sty.servicesDropdown__fqx0U
              )}
            />

            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__pzClB
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yKe9
                )}
              >
                {"Conditions"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__nr6Mt
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__v1QD
                )}
              >
                {"Membership"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__b1Yvl
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zBmQa
                )}
              >
                {"Blog"}
              </div>
            </PlasmicLink__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ab0Ft)}
          >
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___1Ksll
              )}
              component={Link}
              href={"tel:+18722856769"}
              platform={"nextjs"}
            >
              <Icon15Icon
                className={classNames(projectcss.all, sty.svg__gPuvw)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pDiaa
                )}
              >
                {"(872) 285-6769"}
              </div>
            </Stack__>
            <Button
              className={classNames("__wab_instance", sty.button___3YkKx)}
              link={"/book-now"}
              size={"compact"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iwf6T
                )}
              >
                {"Book Now"}
              </div>
            </Button>
          </Stack__>
        </div>
      ) : null}
    </nav>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "hamburgerOpen", "hamburgerClose", "mobileMenu"],
  img: ["img"],
  hamburgerOpen: ["hamburgerOpen"],
  hamburgerClose: ["hamburgerClose"],
  mobileMenu: ["mobileMenu"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTopNav__ArgProps,
          internalVariantPropNames: PlasmicTopNav__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTopNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopNav";
  } else {
    func.displayName = `PlasmicTopNav.${nodeName}`;
  }
  return func;
}

export const PlasmicTopNav = Object.assign(
  // Top-level PlasmicTopNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    hamburgerOpen: makeNodeComponent("hamburgerOpen"),
    hamburgerClose: makeNodeComponent("hamburgerClose"),
    mobileMenu: makeNodeComponent("mobileMenu"),
    // Metadata about props expected for PlasmicTopNav
    internalVariantProps: PlasmicTopNav__VariantProps,
    internalArgProps: PlasmicTopNav__ArgProps
  }
);

export default PlasmicTopNav;
/* prettier-ignore-end */
