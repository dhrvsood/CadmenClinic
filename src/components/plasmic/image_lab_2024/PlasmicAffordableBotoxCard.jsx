// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: dCCKAyC8oXyh
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicAffordableBotoxCard.module.css"; // plasmic-import: dCCKAyC8oXyh/css
import PointIcon from "./icons/PlasmicIcon__Point"; // plasmic-import: dMjm7kjmXw_d/icon

createPlasmicElementProxy;

export const PlasmicAffordableBotoxCard__VariantProps = new Array(
  "best",
  "size"
);

export const PlasmicAffordableBotoxCard__ArgProps = new Array(
  "name",
  "price",
  "perUnit",
  "items",
  "unitWording",
  "pillUnit"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAffordableBotoxCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Botox",
          price: "$11.00",
          perUnit: "$14.00",
          items: [],
          unitWording: "/Unit member price",
          pillUnit: "/Per unit"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "best",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.best
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootbest]: hasVariant($state, "best", "best") }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__rJaX, {
          [sty.freeBoxsize_small__rJaX35NG7]: hasVariant(
            $state,
            "size",
            "small"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__aQxXh, {
            [sty.freeBoxbest__aQxXhn4Fys]: hasVariant($state, "best", "best")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__uesZs, {
              [sty.freeBoxbest__uesZsn4Fys]: hasVariant($state, "best", "best")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rtF4L,
                {
                  [sty.textbest__rtF4Ln4Fys]: hasVariant(
                    $state,
                    "best",
                    "best"
                  ),
                  [sty.textsize_small__rtF4L35NG7]: hasVariant(
                    $state,
                    "size",
                    "small"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.name;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Botox";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__raPro,
                {
                  [sty.textbest__raPrOn4Fys]: hasVariant($state, "best", "best")
                }
              )}
            >
              {"\u00ae"}
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__huPuq,
              { [sty.textbest__huPuqn4Fys]: hasVariant($state, "best", "best") }
            )}
          >
            {"Most Popular"}
          </div>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3XeF0)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"price2"}
            data-plasmic-override={overrides.price2}
            hasGap={true}
            className={classNames(projectcss.all, sty.price2, {
              [sty.price2size_small]: hasVariant($state, "size", "small")
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zq48G,
                {
                  [sty.textsize_small__zq48G35NG7]: hasVariant(
                    $state,
                    "size",
                    "small"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "$11.00";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heading,
                { [sty.headingsize_small]: hasVariant($state, "size", "small") }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.unitWording;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "/Unit member price";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame427321937"}
            data-plasmic-override={overrides.frame427321937}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame427321937)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"price3"}
              data-plasmic-override={overrides.price3}
              hasGap={true}
              className={classNames(projectcss.all, sty.price3, {
                [sty.price3size_small]: hasVariant($state, "size", "small")
              })}
            >
              <div
                data-plasmic-name={"heading2"}
                data-plasmic-override={overrides.heading2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.perUnit;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "$14.00";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"heading3"}
                data-plasmic-override={overrides.heading3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.pillUnit;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "/Per unit";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <div
              data-plasmic-name={"heading4"}
              data-plasmic-override={overrides.heading4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.heading4
              )}
            >
              {"regular price"}
            </div>
          </Stack__>
        </Stack__>
      </Stack__>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"2px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"266px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/image_lab_2024/images/line11.svg",
            fullWidth: 266,
            fullHeight: 2,
            aspectRatio: 133
          }}
        />
      ) : null}
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bVgm)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__szUiG)}
              key={currentIndex}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"title"}
                data-plasmic-override={overrides.title}
                hasGap={true}
                className={classNames(projectcss.all, sty.title)}
              >
                <PointIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nYrNm,
                    {
                      [sty.textsize_small__nYrNm35NG7]: hasVariant(
                        $state,
                        "size",
                        "small"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Versatile Treatment";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hbNd,
                  {
                    [sty.textsize_small__hbNd35NG7]: hasVariant(
                      $state,
                      "size",
                      "small"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return currentItem.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Botox targets facial muscles to address \u2028a variety of cosmetic concerns.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          );
        })}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "price2",
    "heading",
    "frame427321937",
    "price3",
    "heading2",
    "heading3",
    "heading4",
    "img",
    "title",
    "svg"
  ],

  price2: ["price2", "heading"],
  heading: ["heading"],
  frame427321937: [
    "frame427321937",
    "price3",
    "heading2",
    "heading3",
    "heading4"
  ],

  price3: ["price3", "heading2", "heading3"],
  heading2: ["heading2"],
  heading3: ["heading3"],
  heading4: ["heading4"],
  img: ["img"],
  title: ["title", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAffordableBotoxCard__ArgProps,
          internalVariantPropNames: PlasmicAffordableBotoxCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAffordableBotoxCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAffordableBotoxCard";
  } else {
    func.displayName = `PlasmicAffordableBotoxCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAffordableBotoxCard = Object.assign(
  // Top-level PlasmicAffordableBotoxCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    price2: makeNodeComponent("price2"),
    heading: makeNodeComponent("heading"),
    frame427321937: makeNodeComponent("frame427321937"),
    price3: makeNodeComponent("price3"),
    heading2: makeNodeComponent("heading2"),
    heading3: makeNodeComponent("heading3"),
    heading4: makeNodeComponent("heading4"),
    img: makeNodeComponent("img"),
    title: makeNodeComponent("title"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicAffordableBotoxCard
    internalVariantProps: PlasmicAffordableBotoxCard__VariantProps,
    internalArgProps: PlasmicAffordableBotoxCard__ArgProps
  }
);

export default PlasmicAffordableBotoxCard;
/* prettier-ignore-end */
