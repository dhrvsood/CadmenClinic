// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: Bpqz3dE8HPvv
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  hasVariant,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import BookingServicesDropdown from "../../BookingServicesDropdown"; // plasmic-import: j2K8ACviacvY/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBookingServiceList.module.css"; // plasmic-import: Bpqz3dE8HPvv/css

createPlasmicElementProxy;

export const PlasmicBookingServiceList__VariantProps = new Array("open");

export const PlasmicBookingServiceList__ArgProps = new Array("icon", "title");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingServiceList__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__p2P3)}
        onClick={async event => {
          const $steps = {};
          $steps["updateOpen"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "open",
                  operation: 2,
                  value: "open"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }
                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpen"] != null &&
            typeof $steps["updateOpen"] === "object" &&
            typeof $steps["updateOpen"].then === "function"
          ) {
            $steps["updateOpen"] = await $steps["updateOpen"];
          }
        }}
      >
        <div className={classNames(projectcss.all, sty.freeBox__neXpR)}>
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__azxXw)}
                displayHeight={"32px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/image_lab_2024/images/image11.svg",
                  fullWidth: 32,
                  fullHeight: 32,
                  aspectRatio: 1
                }}
              />
            ),

            value: args.icon
          })}
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__faQag, {
            [sty.freeBoxopen__faQagRc7Ym]: hasVariant($state, "open", "open")
          })}
        >
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h3>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgopen]: hasVariant($state, "open", "open")
            })}
            displayHeight={"8px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/image_lab_2024/images/caretSvg.svg",
              fullWidth: 12,
              fullHeight: 8,
              aspectRatio: 1.5
            }}
          />
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__miZbK, {
          [sty.freeBoxopen__miZbKrc7Ym]: hasVariant($state, "open", "open")
        })}
      >
        <BookingServicesDropdown
          data-plasmic-name={"bookingServicesDropdown"}
          data-plasmic-override={overrides.bookingServicesDropdown}
          className={classNames("__wab_instance", sty.bookingServicesDropdown, {
            [sty.bookingServicesDropdownopen]: hasVariant(
              $state,
              "open",
              "open"
            )
          })}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h3", "img", "bookingServicesDropdown"],
  h3: ["h3"],
  img: ["img"],
  bookingServicesDropdown: ["bookingServicesDropdown"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingServiceList__ArgProps,
          internalVariantPropNames: PlasmicBookingServiceList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingServiceList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingServiceList";
  } else {
    func.displayName = `PlasmicBookingServiceList.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingServiceList = Object.assign(
  // Top-level PlasmicBookingServiceList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    img: makeNodeComponent("img"),
    bookingServicesDropdown: makeNodeComponent("bookingServicesDropdown"),
    // Metadata about props expected for PlasmicBookingServiceList
    internalVariantProps: PlasmicBookingServiceList__VariantProps,
    internalArgProps: PlasmicBookingServiceList__ArgProps
  }
);

export default PlasmicBookingServiceList;
/* prettier-ignore-end */
