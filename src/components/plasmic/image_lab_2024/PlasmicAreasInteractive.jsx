// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: cNLJfmXsSSOr
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SelectPill from "../../SelectPill"; // plasmic-import: XgOD49Zg0vP7/component
import AreaCard from "../../AreaCard"; // plasmic-import: pX5xJXaiuz4K/component
import FaceDot from "../../FaceDot"; // plasmic-import: B4gD5jrIlb5E/component
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicAreasInteractive.module.css"; // plasmic-import: cNLJfmXsSSOr/css

createPlasmicElementProxy;

export const PlasmicAreasInteractive__VariantProps = new Array("layout");

export const PlasmicAreasInteractive__ArgProps = new Array(
  "data",
  "onDataChange",
  "selected",
  "onSelectedChange",
  "children",
  "slot"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAreasInteractive__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "data",
        type: "writable",
        variableType: "array",
        valueProp: "data",
        onChangeProp: "onDataChange"
      },
      {
        path: "selected",
        type: "writable",
        variableType: "text",
        valueProp: "selected",
        onChangeProp: "onSelectedChange"
      },
      {
        path: "layout",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.layout
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <section
      data-plasmic-name={"faceSection"}
      data-plasmic-override={overrides.faceSection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.faceSection,
        {
          [sty.faceSectionlayout_noImage]: hasVariant(
            $state,
            "layout",
            "noImage"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__qli0D)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dQDpa, {
              [sty.freeBoxlayout_noImage__dQDpaWahVz]: hasVariant(
                $state,
                "layout",
                "noImage"
              )
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"faceHeader"}
              data-plasmic-override={overrides.faceHeader}
              hasGap={true}
              className={classNames(projectcss.all, sty.faceHeader)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(projectcss.all, projectcss.h2, sty.h2)}
              >
                {renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oPcFl
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Achieve Flawless Skin \nat "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            fontWeight: 500,
                            fontStyle: "italic",
                            color: "#D19D51"
                          }}
                        >
                          {"Affordable Prices"}
                        </span>
                      </React.Fragment>
                    </div>
                  ),

                  value: args.children
                })}
              </h2>
              <p
                data-plasmic-name={"p"}
                data-plasmic-override={overrides.p}
                className={classNames(projectcss.all, projectcss.p, sty.p)}
              >
                {renderPlasmicSlot({
                  defaultContents:
                    "We offer affordable prices for high-quality materials and only professionals in their field.",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </p>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox___61Zze)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"facePills"}
                  data-plasmic-override={overrides.facePills}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.facePills)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $state.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <SelectPill
                        className={classNames(
                          "__wab_instance",
                          sty.selectPill__mcu8T
                        )}
                        handleClick={async () => {
                          const $steps = {};
                          $steps["updateSelected"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selected"]
                                  },
                                  operation: 0,
                                  value: currentItem.name
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;
                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelected"] != null &&
                            typeof $steps["updateSelected"] === "object" &&
                            typeof $steps["updateSelected"].then === "function"
                          ) {
                            $steps["updateSelected"] = await $steps[
                              "updateSelected"
                            ];
                          }
                        }}
                        key={currentIndex}
                        selected={(() => {
                          try {
                            return currentItem.name === $state.selected;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        value={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </Stack__>
              ) : null}
            </div>
          </Stack__>
        </div>
        <div
          className={classNames(projectcss.all, sty.column__kiWqT, {
            [sty.columnlayout_noImage__kiWqTWahVz]: hasVariant(
              $state,
              "layout",
              "noImage"
            )
          })}
        >
          {(hasVariant($state, "layout", "noImage") ? true : false) ? (
            <AreaCard
              data-plasmic-name={"faceCard2"}
              data-plasmic-override={overrides.faceCard2}
              className={classNames("__wab_instance", sty.faceCard2, {
                [sty.faceCard2layout_noImage]: hasVariant(
                  $state,
                  "layout",
                  "noImage"
                )
              })}
              data={(() => {
                try {
                  return $state.data.find(
                    item => item.name === $state.selected
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              types={"content"}
            />
          ) : null}
          <div
            data-plasmic-name={"faceDots"}
            data-plasmic-override={overrides.faceDots}
            className={classNames(projectcss.all, sty.faceDots, {
              [sty.faceDotslayout_noImage]: hasVariant(
                $state,
                "layout",
                "noImage"
              )
            })}
          >
            {(
              hasVariant($state, "layout", "noImage")
                ? true
                : hasVariant(globalVariants, "screen", "midsize")
                ? false
                : true
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__sZKo, {
                  [sty.imglayout_noImage__sZKoWahVz]: hasVariant(
                    $state,
                    "layout",
                    "noImage"
                  )
                })}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/image_lab_2024/images/image15.heic",
                  fullWidth: 650,
                  fullHeight: 494,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "midsize") ? true : false
            ) ? (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__r13O6)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/image_lab_2024/images/image23.avif",
                  fullWidth: 828,
                  fullHeight: 1182,
                  aspectRatio: undefined
                }}
              />
            ) : null}
            <div
              data-plasmic-name={"dots"}
              data-plasmic-override={overrides.dots}
              className={classNames(projectcss.all, sty.dots, {
                [sty.dotslayout_noImage]: hasVariant(
                  $state,
                  "layout",
                  "noImage"
                )
              })}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.data;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <FaceDot
                    data-plasmic-name={"faceDot"}
                    data-plasmic-override={overrides.faceDot}
                    className={classNames("__wab_instance", sty.faceDot)}
                    handleClick={async () => {
                      const $steps = {};
                      $steps["updateSelected"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selected"]
                              },
                              operation: 0,
                              value: currentItem.name
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;
                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelected"] != null &&
                        typeof $steps["updateSelected"] === "object" &&
                        typeof $steps["updateSelected"].then === "function"
                      ) {
                        $steps["updateSelected"] = await $steps[
                          "updateSelected"
                        ];
                      }
                    }}
                    key={currentIndex}
                    left={(() => {
                      try {
                        return currentItem.face_dot.left;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    selected={(() => {
                      try {
                        return currentItem.name === $state.selected;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    top={(() => {
                      try {
                        return currentItem.face_dot.top;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    value={"Forehead"}
                  />
                );
              })}
            </div>
            <AreaCard
              data-plasmic-name={"faceCard"}
              data-plasmic-override={overrides.faceCard}
              className={classNames("__wab_instance", sty.faceCard, {
                [sty.faceCardlayout_noImage]: hasVariant(
                  $state,
                  "layout",
                  "noImage"
                )
              })}
              data={(() => {
                try {
                  return $state.data.find(
                    item => item.name === $state.selected
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__t5Ube, {
                [sty.freeBoxlayout_noImage__t5UbeWahVz]: hasVariant(
                  $state,
                  "layout",
                  "noImage"
                )
              })}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iCato, {
                  [sty.freeBoxlayout_noImage__iCatoWahVz]: hasVariant(
                    $state,
                    "layout",
                    "noImage"
                  )
                })}
              >
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return $state.data;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <SelectPill
                      className={classNames(
                        "__wab_instance",
                        sty.selectPill__hOdou,
                        {
                          [sty.selectPilllayout_noImage__hOdouWahVz]:
                            hasVariant($state, "layout", "noImage")
                        }
                      )}
                      handleClick={async () => {
                        const $steps = {};
                        $steps["updateSelected"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selected"]
                                },
                                operation: 0,
                                value: currentItem.name
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;
                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelected"] != null &&
                          typeof $steps["updateSelected"] === "object" &&
                          typeof $steps["updateSelected"].then === "function"
                        ) {
                          $steps["updateSelected"] = await $steps[
                            "updateSelected"
                          ];
                        }
                      }}
                      key={currentIndex}
                      selected={(() => {
                        try {
                          return currentItem.name === $state.selected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      value={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  );
                })}
              </Stack__>
            </div>
          ) : null}
        </div>
      </Stack__>
    </section>
  );
}

const PlasmicDescendants = {
  faceSection: [
    "faceSection",
    "columns",
    "faceHeader",
    "h2",
    "p",
    "facePills",
    "faceCard2",
    "faceDots",
    "dots",
    "faceDot",
    "faceCard"
  ],

  columns: [
    "columns",
    "faceHeader",
    "h2",
    "p",
    "facePills",
    "faceCard2",
    "faceDots",
    "dots",
    "faceDot",
    "faceCard"
  ],

  faceHeader: ["faceHeader", "h2", "p"],
  h2: ["h2"],
  p: ["p"],
  facePills: ["facePills"],
  faceCard2: ["faceCard2"],
  faceDots: ["faceDots", "dots", "faceDot", "faceCard"],
  dots: ["dots", "faceDot"],
  faceDot: ["faceDot"],
  faceCard: ["faceCard"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAreasInteractive__ArgProps,
          internalVariantPropNames: PlasmicAreasInteractive__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAreasInteractive__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "faceSection") {
    func.displayName = "PlasmicAreasInteractive";
  } else {
    func.displayName = `PlasmicAreasInteractive.${nodeName}`;
  }
  return func;
}

export const PlasmicAreasInteractive = Object.assign(
  // Top-level PlasmicAreasInteractive renders the root element
  makeNodeComponent("faceSection"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    faceHeader: makeNodeComponent("faceHeader"),
    h2: makeNodeComponent("h2"),
    p: makeNodeComponent("p"),
    facePills: makeNodeComponent("facePills"),
    faceCard2: makeNodeComponent("faceCard2"),
    faceDots: makeNodeComponent("faceDots"),
    dots: makeNodeComponent("dots"),
    faceDot: makeNodeComponent("faceDot"),
    faceCard: makeNodeComponent("faceCard"),
    // Metadata about props expected for PlasmicAreasInteractive
    internalVariantProps: PlasmicAreasInteractive__VariantProps,
    internalArgProps: PlasmicAreasInteractive__ArgProps
  }
);

export default PlasmicAreasInteractive;
/* prettier-ignore-end */
