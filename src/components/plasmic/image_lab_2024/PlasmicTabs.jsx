// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: 7uMd6dbMMlqq
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TabLink from "../../TabLink"; // plasmic-import: wjG0vauyGhYj/component
import AccordionDropdown from "../../AccordionDropdown"; // plasmic-import: oPtux9x10OXo/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicTabs.module.css"; // plasmic-import: 7uMd6dbMMlqq/css

createPlasmicElementProxy;

export const PlasmicTabs__VariantProps = new Array();

export const PlasmicTabs__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTabs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selectedTab",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "Before Your Treatment"
      },
      {
        path: "data",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            tab: "Before Your Treatment",
            FAQs: [
              {
                question: "What are the benefits of lip fillers?",
                answer:
                  "You should avoid sun exposure, tanning beds, and self-tanners for 4 weeks prior to your treatment. You should also avoid waxing, tweezing, and electrolysis for 4 weeks prior to your treatment. You should shave the area to be treated the day before your treatment. You should also avoid using any products that may irritate your skin for 1 week prior to your treatment."
              },
              {
                question: "How do lip filler procedures work?",
                answer:
                  "You should wear comfortable clothing to your treatment. You should also wear clothing that will allow the area to be treated to be easily accessible."
              },
              {
                question: "Is the treatment painful?",
                answer:
                  "Yes, you should shave the area to be treated the day before your treatment. This will help to ensure that the laser energy is able to target the hair follicles effectively."
              }
            ]
          },
          {
            tab: "During Your Treatment",
            FAQs: [
              {
                question: "What are the benefits of lip fillers?",
                answer:
                  "You should avoid sun exposure, tanning beds, and self-tanners for 4 weeks prior to your treatment. You should also avoid waxing, tweezing, and electrolysis for 4 weeks prior to your treatment. You should shave the area to be treated the day before your treatment. You should also avoid using any products that may irritate your skin for 1 week prior to your treatment."
              },
              {
                question: "How do lip filler procedures work?",
                answer:
                  "You should wear comfortable clothing to your treatment. You should also wear clothing that will allow the area to be treated to be easily accessible."
              }
            ]
          }
        ]
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__g352I)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.data;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <TabLink
              data-plasmic-name={"tabLink"}
              data-plasmic-override={overrides.tabLink}
              className={classNames("__wab_instance", sty.tabLink)}
              key={currentIndex}
              selected={(() => {
                try {
                  return $state.data[currentIndex].tab === $state.selectedTab;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              text={(() => {
                try {
                  return currentItem.tab;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          );
        })}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__wywZt)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.data.map((item, i) => {
                if (item.tab === $state.selectedTab) {
                  return item.FAQs;
                }
              });
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <AccordionDropdown
              data-plasmic-name={"accordionDropdown"}
              data-plasmic-override={overrides.accordionDropdown}
              className={classNames("__wab_instance", sty.accordionDropdown)}
              key={currentIndex}
            />
          );
        })}
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "tabLink", "accordionDropdown"],
  tabLink: ["tabLink"],
  accordionDropdown: ["accordionDropdown"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTabs__ArgProps,
          internalVariantPropNames: PlasmicTabs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTabs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTabs";
  } else {
    func.displayName = `PlasmicTabs.${nodeName}`;
  }
  return func;
}

export const PlasmicTabs = Object.assign(
  // Top-level PlasmicTabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tabLink: makeNodeComponent("tabLink"),
    accordionDropdown: makeNodeComponent("accordionDropdown"),
    // Metadata about props expected for PlasmicTabs
    internalVariantProps: PlasmicTabs__VariantProps,
    internalArgProps: PlasmicTabs__ArgProps
  }
);

export default PlasmicTabs;
/* prettier-ignore-end */
