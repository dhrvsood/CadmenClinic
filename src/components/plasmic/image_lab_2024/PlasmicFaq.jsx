// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: kXqZTEGKWOeX
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicFaq.module.css"; // plasmic-import: kXqZTEGKWOeX/css
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 9DsOzOTPknoD/icon

createPlasmicElementProxy;

export const PlasmicFaq__VariantProps = new Array("open");

export const PlasmicFaq__ArgProps = new Array("question", "answer");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaq__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "open",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.open
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootopen]: hasVariant($state, "open", "open") }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["updateOpen"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "open",
                operation: 2,
                value: "open"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }
                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateOpen"] != null &&
          typeof $steps["updateOpen"] === "object" &&
          typeof $steps["updateOpen"].then === "function"
        ) {
          $steps["updateOpen"] = await $steps["updateOpen"];
        }
      }}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__sXkop, {
          [sty.freeBoxopen__sXkopqD6HF]: hasVariant($state, "open", "open")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cb0Ha
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <h4
                data-plasmic-name={"h4"}
                data-plasmic-override={overrides.h4}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.h4,
                  { [sty.h4open]: hasVariant($state, "open", "open") }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.question;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Is Botox safe?";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h4>
            }

            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
        <Icon11Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgopen]: hasVariant($state, "open", "open")
          })}
          role={"img"}
        />
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__rV0Vr, {
          [sty.freeBoxopen__rV0VrqD6HF]: hasVariant($state, "open", "open")
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wQbCb
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.answer;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Yes, Botox is a safe and effective treatment when administered by qualified professionals. It has been FDA-approved for cosmetic use for many years and is backed by extensive research and clinical studies. Our experienced specialists ensure the highest standards of safety and care, allowing you  to enjoy the benefits of Botox with confidence.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "h4", "svg"],
  h4: ["h4"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaq__ArgProps,
          internalVariantPropNames: PlasmicFaq__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h4: makeNodeComponent("h4"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
