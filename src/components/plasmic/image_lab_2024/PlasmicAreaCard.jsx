// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: pX5xJXaiuz4K
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicAreaCard.module.css"; // plasmic-import: pX5xJXaiuz4K/css

createPlasmicElementProxy;

export const PlasmicAreaCard__VariantProps = new Array("types");

export const PlasmicAreaCard__ArgProps = new Array("data");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAreaCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "types",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.types
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.roottypes_content]: hasVariant($state, "types", "content"),
          [sty.roottypes_fullContent]: hasVariant(
            $state,
            "types",
            "fullContent"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dBSoq)}>
        <div className={classNames(projectcss.all, sty.freeBox__ynKt0)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"32px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"32px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/image_lab_2024/images/iconSvg14.svg",
              fullWidth: 32,
              fullHeight: 33,
              aspectRatio: 0.969697
            }}
          />
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___3ZwzO, {
            [sty.freeBoxtypes_content___3ZwzOBqb1V]: hasVariant(
              $state,
              "types",
              "content"
            ),
            [sty.freeBoxtypes_fullContent___3ZwzO9R0H5]: hasVariant(
              $state,
              "types",
              "fullContent"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qxbqb,
              {
                [sty.texttypes_content__qxbqbBqb1V]: hasVariant(
                  $state,
                  "types",
                  "content"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.data.name;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__eDd3T, {
          [sty.freeBoxtypes_content__eDd3TBqb1V]: hasVariant(
            $state,
            "types",
            "content"
          ),
          [sty.freeBoxtypes_fullContent__eDd3T9R0H5]: hasVariant(
            $state,
            "types",
            "fullContent"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__eSwSk, ``, {
            [sty.freeBoxtypes_content__eSwSkBqb1V]: hasVariant(
              $state,
              "types",
              "content"
            ),
            [sty.freeBoxtypes_fullContent__eSwSk9R0H5]: hasVariant(
              $state,
              "types",
              "fullContent"
            )
          })}
          style={(() => {
            try {
              return {
                display: $props.data.range ? "flex" : "none"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          {(
            hasVariant($state, "types", "content")
              ? false
              : hasVariant(globalVariants, "screen", "midsize")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9A631,
                {
                  [sty.texttypes_content___9A631Bqb1V]: hasVariant(
                    $state,
                    "types",
                    "content"
                  ),
                  [sty.texttypes_fullContent___9A6319R0H5]: hasVariant(
                    $state,
                    "types",
                    "fullContent"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.data.range;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
          {(hasVariant($state, "types", "content") ? false : true) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iNCa,
                {
                  [sty.texttypes_content__iNCaBqb1V]: hasVariant(
                    $state,
                    "types",
                    "content"
                  ),
                  [sty.texttypes_fullContent__iNCa9R0H5]: hasVariant(
                    $state,
                    "types",
                    "fullContent"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return "  / " + $props.data.units;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__hJj4H,
            {
              [sty.texttypes_content__hJj4HBqb1V]: hasVariant(
                $state,
                "types",
                "content"
              ),
              [sty.texttypes_fullContent__hJj4H9R0H5]: hasVariant(
                $state,
                "types",
                "fullContent"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.data.content;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAreaCard__ArgProps,
          internalVariantPropNames: PlasmicAreaCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAreaCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAreaCard";
  } else {
    func.displayName = `PlasmicAreaCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAreaCard = Object.assign(
  // Top-level PlasmicAreaCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicAreaCard
    internalVariantProps: PlasmicAreaCard__VariantProps,
    internalArgProps: PlasmicAreaCard__ArgProps
  }
);

export default PlasmicAreaCard;
/* prettier-ignore-end */
