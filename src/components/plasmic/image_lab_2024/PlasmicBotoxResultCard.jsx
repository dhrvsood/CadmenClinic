// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: LkkGmqnkkLRj
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBotoxResultCard.module.css"; // plasmic-import: LkkGmqnkkLRj/css

createPlasmicElementProxy;

export const PlasmicBotoxResultCard__VariantProps = new Array();

export const PlasmicBotoxResultCard__ArgProps = new Array("data");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBotoxResultCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uyE5Y)}>
        <PlasmicImg__
          data-plasmic-name={"propsDataImage"}
          data-plasmic-override={overrides.propsDataImage}
          alt={""}
          className={classNames(sty.propsDataImage)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? "200px"
              : "265px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          height={``}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.data.image;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return {
                  src: "/plasmic/image_lab_2024/images/imagePng7.png",
                  fullWidth: 1076,
                  fullHeight: 531,
                  aspectRatio: undefined
                };
              }
              throw e;
            }
          })()}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___0GwmZ)}>
        <div className={classNames(projectcss.all, sty.freeBox__t3AgQ)}>
          <div className={classNames(projectcss.all, sty.freeBox__tV2ST)}>
            <PlasmicImg__
              data-plasmic-name={"propsDataIcon"}
              data-plasmic-override={overrides.propsDataIcon}
              alt={""}
              className={classNames(sty.propsDataIcon)}
              displayHeight={"auto"}
              displayMaxHeight={"40px"}
              displayMaxWidth={"40px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $props.data.icon;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/image_lab_2024/images/proiconsPersonSvg.svg",
                      fullWidth: 40,
                      fullHeight: 41,
                      aspectRatio: 0.97561
                    };
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__kjpQ)}>
            <div
              data-plasmic-name={"propsDataTitle"}
              data-plasmic-override={overrides.propsDataTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.propsDataTitle
              )}
            >
              <React.Fragment>{$props.data.title}</React.Fragment>
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__xoIfd)}>
          <div
            data-plasmic-name={"propsDataDescription"}
            data-plasmic-override={overrides.propsDataDescription}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.propsDataDescription
            )}
          >
            <React.Fragment>{$props.data.description}</React.Fragment>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "propsDataImage",
    "propsDataIcon",
    "propsDataTitle",
    "propsDataDescription"
  ],

  propsDataImage: ["propsDataImage"],
  propsDataIcon: ["propsDataIcon"],
  propsDataTitle: ["propsDataTitle"],
  propsDataDescription: ["propsDataDescription"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBotoxResultCard__ArgProps,
          internalVariantPropNames: PlasmicBotoxResultCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBotoxResultCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBotoxResultCard";
  } else {
    func.displayName = `PlasmicBotoxResultCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBotoxResultCard = Object.assign(
  // Top-level PlasmicBotoxResultCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    propsDataImage: makeNodeComponent("propsDataImage"),
    propsDataIcon: makeNodeComponent("propsDataIcon"),
    propsDataTitle: makeNodeComponent("propsDataTitle"),
    propsDataDescription: makeNodeComponent("propsDataDescription"),
    // Metadata about props expected for PlasmicBotoxResultCard
    internalVariantProps: PlasmicBotoxResultCard__VariantProps,
    internalArgProps: PlasmicBotoxResultCard__ArgProps
  }
);

export default PlasmicBotoxResultCard;
/* prettier-ignore-end */
