// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: 4aj6TPf-GBTB
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBotoxMythsCard.module.css"; // plasmic-import: 4aj6TPf-GBTB/css

createPlasmicElementProxy;

export const PlasmicBotoxMythsCard__VariantProps = new Array();

export const PlasmicBotoxMythsCard__ArgProps = new Array(
  "number",
  "title",
  "fact",
  "description"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBotoxMythsCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__qZv)}>
        <div className={classNames(projectcss.all, sty.freeBox__gIlHd)}>
          <div className={classNames(projectcss.all, sty.freeBox__sojbq)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7EQvV
              )}
            >
              {"Myth #"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ozrfs
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.number;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "1";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sQioD
              )}
            >
              {":"}
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xjWp
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Botox Will Make My Face Look Frozen";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ggRdm)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___1K9Us)}>
          <span
            data-plasmic-name={"span"}
            data-plasmic-override={overrides.span}
            className={classNames(
              projectcss.all,
              projectcss.span,
              projectcss.__wab_text,
              sty.span
            )}
          >
            <div
              className={projectcss.__wab_expr_html_text}
              dangerouslySetInnerHTML={{
                __html: (() => {
                  try {
                    return $props.fact;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Fact: Botox only affects the muscles at the injection site, and when administered by a skilled injector, it\u2019s highly unlikely to \u201cfreeze\u201d your face.";
                    }
                    throw e;
                  }
                })()
              }}
            />
          </span>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__y2HOx
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.description;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "One of the biggest concerns about Botox is that it will lead to an unnatural or \u201cfrozen\u201d appearance. In reality, Botox \u2028is designed to relax specific muscles that cause wrinkles, not to paralyze your entire face. A well-trained provider can use precise injection techniques to soften lines without compromising your natural facial expressions.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "span"],
  span: ["span"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBotoxMythsCard__ArgProps,
          internalVariantPropNames: PlasmicBotoxMythsCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBotoxMythsCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBotoxMythsCard";
  } else {
    func.displayName = `PlasmicBotoxMythsCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBotoxMythsCard = Object.assign(
  // Top-level PlasmicBotoxMythsCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    span: makeNodeComponent("span"),
    // Metadata about props expected for PlasmicBotoxMythsCard
    internalVariantProps: PlasmicBotoxMythsCard__VariantProps,
    internalArgProps: PlasmicBotoxMythsCard__ArgProps
  }
);

export default PlasmicBotoxMythsCard;
/* prettier-ignore-end */
