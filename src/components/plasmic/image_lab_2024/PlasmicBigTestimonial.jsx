// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: qZkEECWSrv1-
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBigTestimonial.module.css"; // plasmic-import: qZkEECWSrv1-/css
import DeviconGoogleSvgIcon from "./icons/PlasmicIcon__DeviconGoogleSvg"; // plasmic-import: qL80CiMJmv_L/icon

createPlasmicElementProxy;

export const PlasmicBigTestimonial__VariantProps = new Array("image");

export const PlasmicBigTestimonial__ArgProps = new Array(
  "quote",
  "author",
  "handle",
  "handleLink",
  "avatar",
  "children",
  "avatar2"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBigTestimonial__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "image",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.image
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootimage]: hasVariant($state, "image", "image") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___1G5Bv, {
          [sty.freeBoximage___1G5BvZoYyX]: hasVariant($state, "image", "image")
        })}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___6Wbd6, {
            [sty.imgimage___6Wbd6ZoYyX]: hasVariant($state, "image", "image")
          })}
          displayHeight={"24px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/image_lab_2024/images/image2.svg",
            fullWidth: 184,
            fullHeight: 27,
            aspectRatio: 6.814815
          }}
        />

        <p
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.p__pFvm6,
            { [sty.pimage__pFvm6ZoYyX]: hasVariant($state, "image", "image") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.quote;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "I had an incredible experience with Botox at this clinic, and I can't recommend it enough! The specialists are absolute professionals\u2014knowledgeable, attentive, and genuinely committed to delivering outstanding results. The results have been life-changing. Thank you for an amazing experience!";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </p>
        <div
          className={classNames(projectcss.all, sty.freeBox__fqEdR, {
            [sty.freeBoximage__fqEdRZoYyX]: hasVariant($state, "image", "image")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wmGnf, {
              [sty.freeBoximage__wmGnfZoYyX]: hasVariant(
                $state,
                "image",
                "image"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__oBOmz, {
                [sty.freeBoximage__oBOmzZoYyX]: hasVariant(
                  $state,
                  "image",
                  "image"
                )
              })}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__k8Daq)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/image_lab_2024/images/image3.svg",
                  fullWidth: 54,
                  fullHeight: 54,
                  aspectRatio: 1
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xolKg, {
                  [sty.freeBoximage__xolKgZoYyX]: hasVariant(
                    $state,
                    "image",
                    "image"
                  )
                })}
              >
                {(hasVariant($state, "image", "image") ? false : true)
                  ? renderPlasmicSlot({
                      defaultContents: (
                        <DeviconGoogleSvgIcon
                          className={classNames(projectcss.all, sty.svg__iF7Mo)}
                          role={"img"}
                        />
                      ),

                      value: args.avatar
                    })
                  : null}
                <p
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.p__r9NZh,
                    {
                      [sty.pimage__r9NZhZoYyX]: hasVariant(
                        $state,
                        "image",
                        "image"
                      )
                    }
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.author;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Anna Green";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </p>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__qafNd, {
                    [sty.imgimage__qafNdZoYyX]: hasVariant(
                      $state,
                      "image",
                      "image"
                    )
                  })}
                  displayHeight={"14px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"14px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/image_lab_2024/images/riVerifiedBadgeFillSvg.svg",
                    fullWidth: 15,
                    fullHeight: 14,
                    aspectRatio: 1.071429
                  }}
                />
              </Stack__>
              {false ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___35DmA)}
                >
                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__orUha
                    )}
                  >
                    {"Instagram: "}
                  </p>
                  <PlasmicLink__
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link
                    )}
                    component={Link}
                    href={"#"}
                    platform={"nextjs"}
                  >
                    {" @anna_green"}
                  </PlasmicLink__>
                </div>
              ) : null}
            </div>
          </Stack__>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__ifmUn, {
          [sty.freeBoximage__ifmUnZoYyX]: hasVariant($state, "image", "image")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__rMujq)}
              displayHeight={"auto"}
              displayMaxHeight={"410px"}
              displayMaxWidth={"453px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/image_lab_2024/images/contentPng.png",
                fullWidth: 907,
                fullHeight: 820,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
      </div>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__d9Et4, {
            [sty.freeBoximage__d9Et4ZoYyX]: hasVariant($state, "image", "image")
          })}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yy3Av, {
              [sty.freeBoximage__yy3AvZoYyX]: hasVariant(
                $state,
                "image",
                "image"
              )
            })}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            )
              ? renderPlasmicSlot({
                  defaultContents: (
                    <DeviconGoogleSvgIcon
                      className={classNames(projectcss.all, sty.svg__hGljB)}
                      role={"img"}
                    />
                  ),

                  value: args.avatar2
                })
              : null}
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__bJov0,
                {
                  [sty.pimage__bJov0ZoYyX]: hasVariant($state, "image", "image")
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.author;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Anna Green";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </p>
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___8J7Em, {
                [sty.imgimage___8J7EmZoYyX]: hasVariant(
                  $state,
                  "image",
                  "image"
                )
              })}
              displayHeight={"14px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"14px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/image_lab_2024/images/riVerifiedBadgeFillSvg.svg",
                fullWidth: 15,
                fullHeight: 14,
                aspectRatio: 1.071429
              }}
            />
          </Stack__>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__a6CBd, {
              [sty.imgimage__a6CBdZoYyX]: hasVariant($state, "image", "image")
            })}
            displayHeight={"16px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"96px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/image_lab_2024/images/starsSvg4.svg",
              fullWidth: 96,
              fullHeight: 16,
              aspectRatio: 6
            }}
          />
        </Stack__>
      ) : null}
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBigTestimonial__ArgProps,
          internalVariantPropNames: PlasmicBigTestimonial__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBigTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBigTestimonial";
  } else {
    func.displayName = `PlasmicBigTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicBigTestimonial = Object.assign(
  // Top-level PlasmicBigTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicBigTestimonial
    internalVariantProps: PlasmicBigTestimonial__VariantProps,
    internalArgProps: PlasmicBigTestimonial__ArgProps
  }
);

export default PlasmicBigTestimonial;
/* prettier-ignore-end */
