// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: B4gD5jrIlb5E
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicFaceDot.module.css"; // plasmic-import: B4gD5jrIlb5E/css

createPlasmicElementProxy;

export const PlasmicFaceDot__VariantProps = new Array("selected");

export const PlasmicFaceDot__ArgProps = new Array(
  "value",
  "left",
  "top",
  "handleClick"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFaceDot__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootselected]: hasVariant($state, "selected", "selected") }
      )}
      onClick={async event => {
        const $steps = {};
        $steps["runHandleClick"] = true
          ? (() => {
              const actionArgs = { eventRef: $props["handleClick"] };
              return (({ eventRef, args }) => {
                return eventRef?.(...(args ?? []));
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["runHandleClick"] != null &&
          typeof $steps["runHandleClick"] === "object" &&
          typeof $steps["runHandleClick"].then === "function"
        ) {
          $steps["runHandleClick"] = await $steps["runHandleClick"];
        }
      }}
      style={(() => {
        try {
          return { top: $props.top, left: $props.left };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <div className={classNames(projectcss.all, sty.freeBox___0KVzi)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__bq3GX, {
            [sty.freeBoxselected__bq3GXBIuk]: hasVariant(
              $state,
              "selected",
              "selected"
            )
          })}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFaceDot__ArgProps,
          internalVariantPropNames: PlasmicFaceDot__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaceDot__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaceDot";
  } else {
    func.displayName = `PlasmicFaceDot.${nodeName}`;
  }
  return func;
}

export const PlasmicFaceDot = Object.assign(
  // Top-level PlasmicFaceDot renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFaceDot
    internalVariantProps: PlasmicFaceDot__VariantProps,
    internalArgProps: PlasmicFaceDot__ArgProps
  }
);

export default PlasmicFaceDot;
/* prettier-ignore-end */
