// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: w7EJDoU6NMVc
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicHowItWorksCard.module.css"; // plasmic-import: w7EJDoU6NMVc/css

createPlasmicElementProxy;

export const PlasmicHowItWorksCard__VariantProps = new Array("small");

export const PlasmicHowItWorksCard__ArgProps = new Array(
  "icon",
  "title",
  "image",
  "children"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHowItWorksCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "small",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.small
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        "how-it-works-card"
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__lrUbM)}>
        <div className={classNames(projectcss.all, sty.freeBox___2TFVv)}>
          <div className={classNames(projectcss.all, sty.freeBox__kqxrG)}>
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__oIJ)}
                  displayHeight={"20px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"20px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/image_lab_2024/images/image11.svg",
                    fullWidth: 32,
                    fullHeight: 32,
                    aspectRatio: 1
                  }}
                />
              ),

              value: args.icon
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__zxcYh)}>
            <div className={classNames(projectcss.all, sty.freeBox__wp9Az)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nu0T
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700, fontStyle: "italic" }}
                      >
                        {"FREE"}
                      </span>
                      <React.Fragment>{" Consultation"}</React.Fragment>
                    </React.Fragment>
                  </div>
                ),

                value: args.title,
                className: classNames(sty.slotTargetTitle)
              })}
            </div>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__aSvm1)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mxcyu)}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__gr82Z, {
                [sty.freeBoxsmall__gr82ZUOshG]: hasVariant(
                  $state,
                  "small",
                  "small"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__fKby9)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/image_lab_2024/images/image14.heic",
                      fullWidth: 511,
                      fullHeight: 256,
                      aspectRatio: undefined
                    }}
                  />
                ),

                value: args.image
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___03BWx)}>
              {renderPlasmicSlot({
                defaultContents:
                  "Unlike invasive procedures, Botox integrates smoothly with your natural expressions, creating gradual improvements. With time, your skin looks younger, without disrupting your facial movements.",
                value: args.children,
                className: classNames(sty.slotTargetChildren)
              })}
            </div>
          </Stack__>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHowItWorksCard__ArgProps,
          internalVariantPropNames: PlasmicHowItWorksCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHowItWorksCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHowItWorksCard";
  } else {
    func.displayName = `PlasmicHowItWorksCard.${nodeName}`;
  }
  return func;
}

export const PlasmicHowItWorksCard = Object.assign(
  // Top-level PlasmicHowItWorksCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicHowItWorksCard
    internalVariantProps: PlasmicHowItWorksCard__VariantProps,
    internalArgProps: PlasmicHowItWorksCard__ArgProps
  }
);

export default PlasmicHowItWorksCard;
/* prettier-ignore-end */
