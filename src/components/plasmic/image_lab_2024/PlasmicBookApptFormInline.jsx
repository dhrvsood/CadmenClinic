// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: H04Yy-E1dsLK
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TextInput2 from "../../TextInput2"; // plasmic-import: g8sOhmJN9oom/component
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBookApptFormInline.module.css"; // plasmic-import: H04Yy-E1dsLK/css

createPlasmicElementProxy;

export const PlasmicBookApptFormInline__VariantProps = new Array();

export const PlasmicBookApptFormInline__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookApptFormInline__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <Stack__
      as={"form"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jFV)}
      >
        <TextInput2
          data-plasmic-name={"firstName"}
          data-plasmic-override={overrides.firstName}
          className={classNames("__wab_instance", sty.firstName)}
          fiieldName={"firstName"}
          label={"First Name"}
          placeholder={"Write your first name"}
        />

        <TextInput2
          data-plasmic-name={"lastName"}
          data-plasmic-override={overrides.lastName}
          className={classNames("__wab_instance", sty.lastName)}
          fiieldName={"lastName"}
          label={"Last Name"}
          placeholder={"Write your last name"}
        />
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__pTS)}
      >
        <TextInput2
          data-plasmic-name={"phone"}
          data-plasmic-override={overrides.phone}
          className={classNames("__wab_instance", sty.phone)}
          fiieldName={"phone"}
          label={"Mobile Number"}
          placeholder={"Write your number"}
          type={"tel"}
        />

        <TextInput2
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames("__wab_instance", sty.email)}
          fiieldName={"email"}
          label={"Email"}
          placeholder={"Write your email"}
          type={"email"}
        />
      </Stack__>
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(
          projectcss.all,
          projectcss.button,
          sty.button,
          "rounded border border-beaver/90 bg-beaver/90 px-10 py-3 text-center text-sm font-light text-white hover:bg-beaver"
        )}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"BOOK AN APPOINTMENT"}
        </div>
      </button>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "firstName", "lastName", "phone", "email", "button", "text"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  phone: ["phone"],
  email: ["email"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookApptFormInline__ArgProps,
          internalVariantPropNames: PlasmicBookApptFormInline__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookApptFormInline__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookApptFormInline";
  } else {
    func.displayName = `PlasmicBookApptFormInline.${nodeName}`;
  }
  return func;
}

export const PlasmicBookApptFormInline = Object.assign(
  // Top-level PlasmicBookApptFormInline renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    phone: makeNodeComponent("phone"),
    email: makeNodeComponent("email"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicBookApptFormInline
    internalVariantProps: PlasmicBookApptFormInline__VariantProps,
    internalArgProps: PlasmicBookApptFormInline__ArgProps
  }
);

export default PlasmicBookApptFormInline;
/* prettier-ignore-end */
