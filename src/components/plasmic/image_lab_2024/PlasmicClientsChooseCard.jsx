// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: FCxiefSs7Fuf
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicClientsChooseCard.module.css"; // plasmic-import: FCxiefSs7Fuf/css

createPlasmicElementProxy;

export const PlasmicClientsChooseCard__VariantProps = new Array();

export const PlasmicClientsChooseCard__ArgProps = new Array("title");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicClientsChooseCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"clientsChooseCard"}
      data-plasmic-override={overrides.clientsChooseCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.clientsChooseCard
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "The Best Botox in Chicago: \u2028Why Clients Choose ImageLab Medspa";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </div>
      <PlasmicImg__
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"650px"}
        loading={"lazy"}
        src={{
          src: "/plasmic/image_lab_2024/images/imagePng23.png",
          fullWidth: 1300,
          fullHeight: 860,
          aspectRatio: undefined
        }}
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  clientsChooseCard: ["clientsChooseCard", "freeBox", "text", "img"],
  freeBox: ["freeBox", "text"],
  text: ["text"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicClientsChooseCard__ArgProps,
          internalVariantPropNames: PlasmicClientsChooseCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicClientsChooseCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "clientsChooseCard") {
    func.displayName = "PlasmicClientsChooseCard";
  } else {
    func.displayName = `PlasmicClientsChooseCard.${nodeName}`;
  }
  return func;
}

export const PlasmicClientsChooseCard = Object.assign(
  // Top-level PlasmicClientsChooseCard renders the root element
  makeNodeComponent("clientsChooseCard"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicClientsChooseCard
    internalVariantProps: PlasmicClientsChooseCard__VariantProps,
    internalArgProps: PlasmicClientsChooseCard__ArgProps
  }
);

export default PlasmicClientsChooseCard;
/* prettier-ignore-end */
