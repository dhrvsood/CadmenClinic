// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: FJd692mLTIMz
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  get as $stateGet,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: 0o-OkGmTYJg3/component
import StatusPill from "../../StatusPill"; // plasmic-import: Tnw_A5so-3TB/component
import StatusPillSeparator from "../../StatusPillSeparator"; // plasmic-import: X6Tlco2HDTaT/component
import BookingServiceList from "../../BookingServiceList"; // plasmic-import: Bpqz3dE8HPvv/component
import BookingTimePicker from "../../BookingTimePicker"; // plasmic-import: PTe18XNw_tIO/component
import TextInput from "../../TextInput"; // plasmic-import: jwt5iReLG8FO/component
import Checkbox from "../../Checkbox"; // plasmic-import: esEu1L6QdGZz/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBookingFlow.module.css"; // plasmic-import: FJd692mLTIMz/css
import EmailIconSvg2Icon from "./icons/PlasmicIcon__EmailIconSvg2"; // plasmic-import: ez5eeafSTiVI/icon
import BackArrowSvgIcon from "./icons/PlasmicIcon__BackArrowSvg"; // plasmic-import: k1lpxD1MLZKz/icon

createPlasmicElementProxy;

export const PlasmicBookingFlow__VariantProps = new Array();

export const PlasmicBookingFlow__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBookingFlow__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "step",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "bookingTimePicker.times",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { time: "9:00 AM" },
          { time: "11:30 AM" },
          { time: "3:00 PM" }
        ]
      },
      {
        path: "bookingTimePicker2.times",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { time: "9:00 AM" },
          { time: "11:30 AM" },
          { time: "3:00 PM" }
        ]
      },
      {
        path: "bookingTimePicker3.times",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { time: "9:00 AM" },
          { time: "11:30 AM" },
          { time: "3:00 PM" }
        ]
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ck88K)}>
        {(() => {
          try {
            return $state.step === 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"bookingStep0"}
            data-plasmic-override={overrides.bookingStep0}
            hasGap={true}
            className={classNames(projectcss.all, sty.bookingStep0)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xDLu4)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Get "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{
                      color: "var(--token-WqmKFbtStDOp)",
                      fontWeight: 500,
                      fontStyle: "italic"
                    }}
                  >
                    {"started"}
                  </span>
                </React.Fragment>
              </h1>
              <dd
                data-plasmic-name={"dd"}
                data-plasmic-override={overrides.dd}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.dd
                )}
              >
                {"Welcome to our cosmetology clinic!"}
              </dd>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lxJFj)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__bHClg)}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lhIY
                  )}
                >
                  {"I am a new patient"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__vKdwa)}
                color={"outlineGrey"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___00J4
                  )}
                >
                  {"I am an existing patient"}
                </div>
              </Button>
            </Stack__>
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $state.step > 0;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div className={classNames(projectcss.all, sty.freeBox___3IWrk)}>
            {(() => {
              try {
                return $state.step <= 3;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__kM6P)}>
                <StatusPill
                  className={classNames(
                    "__wab_instance",
                    sty.statusPill__dtQla
                  )}
                  status={(() => {
                    try {
                      return (() => {
                        const step = 1;
                        return $state.step === step
                          ? "current"
                          : $state.step > step && "completed";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={"01. Service"}
                />

                <StatusPillSeparator
                  className={classNames(
                    "__wab_instance",
                    sty.statusPillSeparator__kAdyr
                  )}
                />

                <StatusPill
                  className={classNames(
                    "__wab_instance",
                    sty.statusPill__wcr3J
                  )}
                  status={(() => {
                    try {
                      return (() => {
                        const step = 2;
                        return $state.step === step
                          ? "current"
                          : $state.step > step && "completed";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={"02. Date & Time"}
                />

                <StatusPillSeparator
                  className={classNames(
                    "__wab_instance",
                    sty.statusPillSeparator__kpNy6
                  )}
                />

                <StatusPill
                  className={classNames(
                    "__wab_instance",
                    sty.statusPill__xNtEz
                  )}
                  status={(() => {
                    try {
                      return (() => {
                        const step = 3;
                        return $state.step === step
                          ? "current"
                          : $state.step > step && "completed";
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  text={"03. Information"}
                />
              </div>
            ) : null}
            {(() => {
              try {
                return $state.step === 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"bookingStep1"}
                data-plasmic-override={overrides.bookingStep1}
                className={classNames(projectcss.all, sty.bookingStep1)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aLbSv)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aJpvk)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__jAIc6
                      )}
                    >
                      {"Which treatment do you need?"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ap3Sr
                      )}
                    >
                      {"Select a service"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__z0Ahj)}
                  >
                    <BookingServiceList
                      className={classNames(
                        "__wab_instance",
                        sty.bookingServiceList__nQhye
                      )}
                      title={"Consultation"}
                    />

                    <BookingServiceList
                      className={classNames(
                        "__wab_instance",
                        sty.bookingServiceList__w5GrS
                      )}
                      title={"Injectables"}
                    />
                  </Stack__>
                </Stack__>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.step === 2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"bookingStep2"}
                data-plasmic-override={overrides.bookingStep2}
                className={classNames(projectcss.all, sty.bookingStep2)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6G2D)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__i783V
                    )}
                  >
                    {"When would you like to visit us?"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iUgHz
                    )}
                  >
                    {"Select a service"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3FgAs)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lc8Bi)}
                    >
                      <BookingTimePicker
                        data-plasmic-name={"bookingTimePicker"}
                        data-plasmic-override={overrides.bookingTimePicker}
                        className={classNames(
                          "__wab_instance",
                          sty.bookingTimePicker
                        )}
                        label={"Morning:"}
                        onTimesChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookingTimePicker",
                            "times"
                          ]).apply(null, eventArgs);
                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        times={generateStateValueProp($state, [
                          "bookingTimePicker",
                          "times"
                        ])}
                      />

                      <BookingTimePicker
                        data-plasmic-name={"bookingTimePicker2"}
                        data-plasmic-override={overrides.bookingTimePicker2}
                        className={classNames(
                          "__wab_instance",
                          sty.bookingTimePicker2
                        )}
                        label={"Afternoon:"}
                        onTimesChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookingTimePicker2",
                            "times"
                          ]).apply(null, eventArgs);
                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        times={generateStateValueProp($state, [
                          "bookingTimePicker2",
                          "times"
                        ])}
                      />

                      <BookingTimePicker
                        data-plasmic-name={"bookingTimePicker3"}
                        data-plasmic-override={overrides.bookingTimePicker3}
                        className={classNames(
                          "__wab_instance",
                          sty.bookingTimePicker3
                        )}
                        label={"Evening:"}
                        onTimesChange={async (...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "bookingTimePicker3",
                            "times"
                          ]).apply(null, eventArgs);
                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        times={generateStateValueProp($state, [
                          "bookingTimePicker3",
                          "times"
                        ])}
                      />
                    </Stack__>
                  </div>
                </Stack__>
              </div>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ukbd4)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tOsey)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___4AN7I
                  )}
                >
                  {"Tell us more about you"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8JCgA
                  )}
                >
                  {"Enter your personal information"}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dk6BO)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dqoyf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9JqAq
                    )}
                  >
                    {"Your Name"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___72K1Z)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Enter your first and last name"}
                      size={"thick"}
                      value={
                        generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sHjNq)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rggj
                    )}
                  >
                    {"Email"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vMjeO)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      className={classNames("__wab_instance", sty.textInput2)}
                      onChange={async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput2",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Enter your email"}
                      showStartIcon={true}
                      size={"thick"}
                      startIcon={
                        <EmailIconSvg2Icon
                          className={classNames(projectcss.all, sty.svg__oPv0J)}
                          role={"img"}
                        />
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__stZ64)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fzTfj
                    )}
                  >
                    {"Phone number"}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oobG)}
                  >
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      className={classNames("__wab_instance", sty.textInput3)}
                      onChange={async (...eventArgs) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "textInput3",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"555 000 0000"}
                      showStartIcon={true}
                      size={"thick"}
                      startIcon={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jfHz
                          )}
                        >
                          {"+1"}
                        </div>
                      }
                      value={
                        generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                </Stack__>
                <div className={classNames(projectcss.all, sty.freeBox__cQcBl)}>
                  <Checkbox
                    data-plasmic-name={"checkbox"}
                    data-plasmic-override={overrides.checkbox}
                    className={classNames("__wab_instance", sty.checkbox)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4PZ0V
                        )}
                      >
                        {
                          "I agree to receive transaction and marketing messages messages from ImageLab."
                        }
                      </div>
                    }
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "checkbox",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />
                </div>
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__sy6J7)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__olOcs)}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 3
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue - 1);
                          return oldValue - 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                <BackArrowSvgIcon
                  className={classNames(projectcss.all, sty.svg__ljzAh)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wychD
                  )}
                >
                  {"Back"}
                </div>
              </Stack__>
              <Button
                className={classNames("__wab_instance", sty.button___1ObsA)}
                onClick={async event => {
                  const $steps = {};
                  $steps["updateStep"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["step"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStep"] != null &&
                    typeof $steps["updateStep"] === "object" &&
                    typeof $steps["updateStep"].then === "function"
                  ) {
                    $steps["updateStep"] = await $steps["updateStep"];
                  }
                }}
              >
                {"Next"}
              </Button>
            </div>
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "bookingStep0",
    "h1",
    "dd",
    "bookingStep1",
    "bookingStep2",
    "bookingTimePicker",
    "bookingTimePicker2",
    "bookingTimePicker3",
    "textInput",
    "textInput2",
    "textInput3",
    "checkbox"
  ],

  bookingStep0: ["bookingStep0", "h1", "dd"],
  h1: ["h1"],
  dd: ["dd"],
  bookingStep1: ["bookingStep1"],
  bookingStep2: [
    "bookingStep2",
    "bookingTimePicker",
    "bookingTimePicker2",
    "bookingTimePicker3"
  ],

  bookingTimePicker: ["bookingTimePicker"],
  bookingTimePicker2: ["bookingTimePicker2"],
  bookingTimePicker3: ["bookingTimePicker3"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  checkbox: ["checkbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBookingFlow__ArgProps,
          internalVariantPropNames: PlasmicBookingFlow__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBookingFlow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookingFlow";
  } else {
    func.displayName = `PlasmicBookingFlow.${nodeName}`;
  }
  return func;
}

export const PlasmicBookingFlow = Object.assign(
  // Top-level PlasmicBookingFlow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bookingStep0: makeNodeComponent("bookingStep0"),
    h1: makeNodeComponent("h1"),
    dd: makeNodeComponent("dd"),
    bookingStep1: makeNodeComponent("bookingStep1"),
    bookingStep2: makeNodeComponent("bookingStep2"),
    bookingTimePicker: makeNodeComponent("bookingTimePicker"),
    bookingTimePicker2: makeNodeComponent("bookingTimePicker2"),
    bookingTimePicker3: makeNodeComponent("bookingTimePicker3"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    checkbox: makeNodeComponent("checkbox"),
    // Metadata about props expected for PlasmicBookingFlow
    internalVariantProps: PlasmicBookingFlow__VariantProps,
    internalArgProps: PlasmicBookingFlow__ArgProps
  }
);

export default PlasmicBookingFlow;
/* prettier-ignore-end */
