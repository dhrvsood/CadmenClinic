// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: NylQq7mzP_E5
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicBenefitsOfBotoxCard.module.css"; // plasmic-import: NylQq7mzP_E5/css
import IconPersonIcon from "./icons/PlasmicIcon__IconPerson"; // plasmic-import: Z8GSNy9IcYdV/icon

createPlasmicElementProxy;

export const PlasmicBenefitsOfBotoxCard__VariantProps = new Array();

export const PlasmicBenefitsOfBotoxCard__ArgProps = new Array(
  "icon",
  "title",
  "slot"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBenefitsOfBotoxCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        "benefits-of-botox-card"
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jxaN)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ntqs)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2CnZo)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"proiconsPerson"}
              data-plasmic-override={overrides.proiconsPerson}
              hasGap={true}
              className={classNames(projectcss.all, sty.proiconsPerson)}
            >
              {renderPlasmicSlot({
                defaultContents: (
                  <IconPersonIcon
                    className={classNames(projectcss.all, sty.svg__nrtL5)}
                    role={"img"}
                  />
                ),

                value: args.icon
              })}
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qyMeM)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kwcXe
                )}
              >
                {"Natural-Looking Results"}
              </div>
            ),

            value: args.title
          })}
        </Stack__>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__xtn7K)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__x3Tjv)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3P8K
                )}
              >
                {
                  "Botox softens wrinkles and fine lines for a refreshed, youthful appearance that looks completely natural. Our expert team ensures a subtle enhancement tailored to your unique features."
                }
              </div>
            ),

            value: args.slot
          })}
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "proiconsPerson"],
  proiconsPerson: ["proiconsPerson"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBenefitsOfBotoxCard__ArgProps,
          internalVariantPropNames: PlasmicBenefitsOfBotoxCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBenefitsOfBotoxCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBenefitsOfBotoxCard";
  } else {
    func.displayName = `PlasmicBenefitsOfBotoxCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBenefitsOfBotoxCard = Object.assign(
  // Top-level PlasmicBenefitsOfBotoxCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    proiconsPerson: makeNodeComponent("proiconsPerson"),
    // Metadata about props expected for PlasmicBenefitsOfBotoxCard
    internalVariantProps: PlasmicBenefitsOfBotoxCard__VariantProps,
    internalArgProps: PlasmicBenefitsOfBotoxCard__ArgProps
  }
);

export default PlasmicBenefitsOfBotoxCard;
/* prettier-ignore-end */
