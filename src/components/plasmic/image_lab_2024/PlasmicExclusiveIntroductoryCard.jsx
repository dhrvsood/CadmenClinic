// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: VGh7KcGoPMWf
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: 0o-OkGmTYJg3/component
import { useScreenVariants as useScreenVariants_4IUcgkiijTv2 } from "../blank_website/PlasmicGlobalVariant__Screen"; // plasmic-import: 4iUCGKIIJTv2/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicExclusiveIntroductoryCard.module.css"; // plasmic-import: VGh7KcGoPMWf/css

createPlasmicElementProxy;

export const PlasmicExclusiveIntroductoryCard__VariantProps = new Array();

export const PlasmicExclusiveIntroductoryCard__ArgProps = new Array(
  "children",
  "title",
  "discount",
  "from",
  "price",
  "until",
  "goToPage",
  "category",
  "service"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExclusiveIntroductoryCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4IUcgkiijTv2()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__tGbbD)}>
        <div className={classNames(projectcss.all, sty.freeBox__mWaMa)}>
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ugjul)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/image_lab_2024/images/imagePng67.png",
                  fullWidth: 240,
                  fullHeight: 230,
                  aspectRatio: undefined
                }}
              />
            ),

            value: args.children
          })}
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vExS)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7U9Q1)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__a07Fw
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Botox";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nqZ9C
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.discount;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "30% off";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__fYrvu)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___03Cmt
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.from;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "From";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9Lzvd
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.price;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "$9.99";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bbA9T
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.until;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "/unit ";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </Stack__>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__jNIzL)}>
        <Button
          data-plasmic-name={"exclusiveIntroductoryButton"}
          data-plasmic-override={overrides.exclusiveIntroductoryButton}
          className={classNames(
            "__wab_instance",
            sty.exclusiveIntroductoryButton
          )}
          color={"white"}
          link={undefined}
        >
          {"Claim My Offer"}
        </Button>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "exclusiveIntroductoryButton"],
  exclusiveIntroductoryButton: ["exclusiveIntroductoryButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExclusiveIntroductoryCard__ArgProps,
          internalVariantPropNames:
            PlasmicExclusiveIntroductoryCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicExclusiveIntroductoryCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExclusiveIntroductoryCard";
  } else {
    func.displayName = `PlasmicExclusiveIntroductoryCard.${nodeName}`;
  }
  return func;
}

export const PlasmicExclusiveIntroductoryCard = Object.assign(
  // Top-level PlasmicExclusiveIntroductoryCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    exclusiveIntroductoryButton: makeNodeComponent(
      "exclusiveIntroductoryButton"
    ),
    // Metadata about props expected for PlasmicExclusiveIntroductoryCard
    internalVariantProps: PlasmicExclusiveIntroductoryCard__VariantProps,
    internalArgProps: PlasmicExclusiveIntroductoryCard__ArgProps
  }
);

export default PlasmicExclusiveIntroductoryCard;
/* prettier-ignore-end */
