// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: nk356y6CCF9w
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicTextToggler.module.css"; // plasmic-import: nk356y6CCF9w/css

createPlasmicElementProxy;

export const PlasmicTextToggler__VariantProps = new Array("white");

export const PlasmicTextToggler__ArgProps = new Array("height", "text");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTextToggler__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "isShowText",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "white",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.white
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootwhite]: hasVariant($state, "white", "white") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__n0TI)}
        style={(() => {
          try {
            return {
              height: $state.isShowText ? "100%" : $props.height
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jYwe,
            { [sty.textwhite__jYweqjObc]: hasVariant($state, "white", "white") }
          )}
        >
          <div
            className={projectcss.__wab_expr_html_text}
            dangerouslySetInnerHTML={{
              __html: (() => {
                try {
                  return $props.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            }}
          />
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zau41)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6KhjE)}
          onClick={async event => {
            const $steps = {};
            $steps["updateIsShowText"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isShowText"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsShowText"] != null &&
              typeof $steps["updateIsShowText"] === "object" &&
              typeof $steps["updateIsShowText"].then === "function"
            ) {
              $steps["updateIsShowText"] = await $steps["updateIsShowText"];
            }
          }}
          style={(() => {
            try {
              return {
                display: $state.isShowText ? "flex" : "none"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ssRxZ,
              {
                [sty.textwhite__ssRxZqjObc]: hasVariant(
                  $state,
                  "white",
                  "white"
                )
              }
            )}
          >
            {"Read less"}
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img___09D1V, {
              [sty.imgwhite___09D1VqjObc]: hasVariant($state, "white", "white")
            })}
            displayHeight={"16px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"16px"}
            loading={"lazy"}
            src={
              hasVariant($state, "white", "white")
                ? {
                    src: "/plasmic/image_lab_2024/images/arrowDownSvg2.svg",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: 1
                  }
                : {
                    src: "/plasmic/image_lab_2024/images/arrowDownSvg.svg",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: 1
                  }
            }
          />
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__s6G3P, {
            [sty.freeBoxwhite__s6G3PqjObc]: hasVariant($state, "white", "white")
          })}
          onClick={async event => {
            const $steps = {};
            $steps["updateIsShowText"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["isShowText"]
                    },
                    operation: 4
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;
                    const oldValue = $stateGet(objRoot, variablePath);
                    $stateSet(objRoot, variablePath, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateIsShowText"] != null &&
              typeof $steps["updateIsShowText"] === "object" &&
              typeof $steps["updateIsShowText"].then === "function"
            ) {
              $steps["updateIsShowText"] = await $steps["updateIsShowText"];
            }
          }}
          style={(() => {
            try {
              return {
                display: $state.isShowText ? "none" : "flex"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3ENgm,
              {
                [sty.textwhite___3ENgmqjObc]: hasVariant(
                  $state,
                  "white",
                  "white"
                )
              }
            )}
          >
            {"Read more "}
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__wayha, {
              [sty.imgwhite__wayhAqjObc]: hasVariant($state, "white", "white")
            })}
            displayHeight={"16px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"16px"}
            loading={"lazy"}
            src={
              hasVariant($state, "white", "white")
                ? {
                    src: "/plasmic/image_lab_2024/images/arrowDownSvg2.svg",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: 1
                  }
                : {
                    src: "/plasmic/image_lab_2024/images/arrowDownSvg.svg",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: 1
                  }
            }
          />
        </Stack__>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTextToggler__ArgProps,
          internalVariantPropNames: PlasmicTextToggler__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTextToggler__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextToggler";
  } else {
    func.displayName = `PlasmicTextToggler.${nodeName}`;
  }
  return func;
}

export const PlasmicTextToggler = Object.assign(
  // Top-level PlasmicTextToggler renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTextToggler
    internalVariantProps: PlasmicTextToggler__VariantProps,
    internalArgProps: PlasmicTextToggler__ArgProps
  }
);

export default PlasmicTextToggler;
/* prettier-ignore-end */
