// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fpxTiFS69ULcX4wDGEfw3c
// Component: TO66K8qjr8TP
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "../blank_website/plasmic.module.css"; // plasmic-import: fpxTiFS69ULcX4wDGEfw3c/projectcss
import sty from "./PlasmicDiscountPricingPill.module.css"; // plasmic-import: TO66K8qjr8TP/css

createPlasmicElementProxy;

export const PlasmicDiscountPricingPill__VariantProps = new Array();

export const PlasmicDiscountPricingPill__ArgProps = new Array(
  "strikePrice",
  "salePrice",
  "perUnit"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDiscountPricingPill__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <p
        className={classNames(
          projectcss.all,
          projectcss.p,
          projectcss.__wab_text,
          sty.p__wLTdE
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.strikePrice;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "$14.00";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </p>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <p
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.p___8Izu3
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.salePrice;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "$9.99 ";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </p>
        <p
          className={classNames(
            projectcss.all,
            projectcss.p,
            projectcss.__wab_text,
            sty.p__lsKr7
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.perUnit;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "/unit dysport";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </p>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiscountPricingPill__ArgProps,
          internalVariantPropNames: PlasmicDiscountPricingPill__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDiscountPricingPill__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiscountPricingPill";
  } else {
    func.displayName = `PlasmicDiscountPricingPill.${nodeName}`;
  }
  return func;
}

export const PlasmicDiscountPricingPill = Object.assign(
  // Top-level PlasmicDiscountPricingPill renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicDiscountPricingPill
    internalVariantProps: PlasmicDiscountPricingPill__VariantProps,
    internalArgProps: PlasmicDiscountPricingPill__ArgProps
  }
);

export default PlasmicDiscountPricingPill;
/* prettier-ignore-end */
